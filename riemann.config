(require '[riemann.logging :as logging])
(require '[riemann.influxdb :refer [influxdb]])
(require '[clojure.string :as str])

;; Logging
(logging/init {:file "/var/log/riemann/riemann.log"})

;; Riemann input servers
(tcp-server {:host "0.0.0.0" :port 5555})
(udp-server {:host "0.0.0.0" :port 5555})

;; InfluxDB connection settings
(def influxdb-creds
  {:host "192.168.64.9"
   :port 8086
   :db "riemann"
   :version :1}) ;; Use :1 if you're on InfluxDB 1.x+

(def influx-sender (influxdb influxdb-creds))

;; Convert attribute list to map
(defn attr-map [event]
  (into {} (for [a (:attributes event)]
             [(:key a) (:value a)])))

;; Normalize and send to InfluxDB (skip only top-master)
(defn normalize-and-send [event]
  (let [attrs (attr-map event)
        method (get attrs "method" "unknown")
        response-code (get attrs "response_code" "unknown")
        agent (get attrs "agent" "unknown")
        ip (get attrs "ip" "unknown")
        host (:host event)]
    (when (not= host "top-master")
      (let [new-event (-> event
                          (assoc :service "nginx_logs")
                          (assoc :tags {:method method
                                        :response_code response-code
                                        :agent agent
                                        :ip ip}))]
        (info "Influx Payload: " new-event)
        (influx-sender new-event)))))

;; Main stream
(let [index (index)]
  (streams
    index
    ;; Filter out only top-master, allow others
    (fn [event]
      (when (not= (:host event) "top-master")
        (info "Received event: " event)
        (normalize-and-send event))
      nil)))
