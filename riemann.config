(logging/init {:file "/var/log/riemann/riemann.log"})
;; logging initialization

(tcp-server {:host "0.0.0.0" :port 5555})
(udp-server {:host "0.0.0.0" :port 5555})
;; now can talk to externals

;; variables
(let [counter (atom 0) 
      threshold 5
      interval-ms 60000]

  ;; Reset counter every 60 seconds (background thread)
  (future
    (while true
      (Thread/sleep interval-ms)
      (reset! counter 0)))

;; processing logic
  (streams
    (fn [event]
      (let [resp-code (:response_code event)
            code (try
                   (Integer/parseInt resp-code) ;; converting response code to integer
                   (catch Exception _ nil))
            tags (:tags event)]
        (when (and code
                   (= (quot code 100) 2)  ;; check if response code is 2xx
                   (not-any? #(= % "riemann") tags))
          (swap! counter inc)
          (info ">>>>>>>> 2xx OK Event Count:" @counter)
          (when (>= @counter threshold)
            (info "!!!!-!!!! ALERT: High rate of 2xx responses detected!")))))))
